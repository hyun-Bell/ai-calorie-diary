name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8.6.11'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: guswhd12
  POSTGRES_DB: claude-cal-diary
  DATABASE_URL: postgresql://postgres:guswhd12@localhost:5432/claude-cal-diary?schema=public

permissions:
  issues: write
  pull-requests: write
  contents: read
  checks: write
  statuses: write

jobs:
  test-and-build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run Prisma migrations
        run: pnpm prisma migrate deploy

      - name: Run linter
        run: pnpm lint

      - name: Run unit tests
        run: pnpm test -- --json --outputFile=test-results.json

      - name: Run e2e tests
        run: pnpm exec jest --config ./test/jest-e2e.json --json --outputFile=e2e-test-results.json

      - name: Check test results
        id: check_tests
        run: |
          function checkTestOutcome {
            local file=$1
            local failed=$(jq '.numFailedTests' $file)
            local total=$(jq '.numTotalTests' $file)
            local skipped=$(jq '.numPendingTests' $file)
            local passed=$((total - failed - skipped))
          
            echo "Total: $total, Passed: $passed, Failed: $failed, Skipped: $skipped"
          
            if [ $failed -eq 0 ]; then
              return 0
            else
              return 1
            fi
          }
          
          echo "Unit Test Results:"
          checkTestOutcome test-results.json
          unit_result=$?
          
          echo "E2E Test Results:"
          checkTestOutcome e2e-test-results.json
          e2e_result=$?
          
          if [ $unit_result -eq 0 ] && [ $e2e_result -eq 0 ]; then
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          else
            echo "tests_passed=false" >> $GITHUB_OUTPUT
          fi

      - name: Build project
        if: steps.check_tests.outputs.tests_passed == 'true'
        run: pnpm build

      - name: Post test and build results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            
            function parseTestResults(filePath) {
              const resultData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
              return resultData.testResults.flatMap(file => 
                file.assertionResults.map(test => ({
                  name: `${file.name}: ${test.title}`,
                  status: test.status
                }))
              );
            }
            
            function formatResults(tests) {
              return tests.map(t => {
                let icon;
                switch(t.status) {
                  case 'passed': icon = '✅'; break;
                  case 'failed': icon = '❌'; break;
                  case 'skipped': icon = '⏭️'; break;
                  default: icon = '❓';
                }
                return `${icon} ${t.name}`;
              }).join('\n');
            }
            
            const unitTests = parseTestResults('test-results.json');
            const e2eTests = parseTestResults('e2e-test-results.json');
            
            const testsPassed = '${{ steps.check_tests.outputs.tests_passed }}' === 'true';
            
            const body = `## 테스트 및 빌드 결과
            
            ### Unit Tests
            ${formatResults(unitTests)}
            
            ### E2E Tests
            ${formatResults(e2eTests)}
            
            ${testsPassed ? '## 빌드 성공 ✅\n프로젝트 빌드가 성공적으로 완료되었습니다.' : '## 빌드 실패 ❌\n테스트 실패로 인해 빌드가 진행되지 않았습니다.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });