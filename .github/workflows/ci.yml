name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

permissions:
  issues: write
  pull-requests: write
  contents: read
  checks: write
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: guswhd12
          POSTGRES_DB: claude-cal-diary
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Database
      DATABASE_URL: postgresql://postgres:guswhd12@localhost:5432/claude-cal-diary?schema=public
      
      # JWT
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      JWT_REFRESH_SECRET: ${{ secrets.JWT_REFRESH_SECRET }}
      
      # AWS
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
      
      # OpenAI - GitHub에서 목업 여부 제어
      USE_MOCK_OPENAI: ${{ vars.USE_MOCK_OPENAI || 'true' }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      OPENAI_ORG_ID: ${{ secrets.OPENAI_ORG_ID }}
      OPENAI_PROJECT_ID: ${{ secrets.OPENAI_PROJECT_ID }}

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.11

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Run Prisma migrations
        run: pnpm prisma migrate deploy

      - name: Run linter
        run: pnpm lint

      - name: Run tests
        run: pnpm test -- --json --outputFile=test-results.json
        continue-on-error: true
        id: run_tests

      - name: Save test results
        if: always()
        run: |
          echo "${{ steps.run_tests.outputs.stdout }}" > test-results.txt
          echo "${{ steps.run_tests.outputs.stderr }}" >> test-results.txt

      - name: Run e2e tests (Mock)
        run: |
          pnpm prisma migrate deploy
          pnpm test:e2e:mock --json --outputFile=e2e-test-results.json
        continue-on-error: true
        id: run_e2e_tests

      - name: Save e2e test results
        if: always()
        run: |
          echo "${{ steps.run_e2e_tests.outputs.stdout }}" > e2e-test-results.txt
          echo "${{ steps.run_e2e_tests.outputs.stderr }}" >> e2e-test-results.txt

      - name: Run Food Integration Tests (Real API)
        if: vars.RUN_REAL_API_TESTS == 'true' && vars.USE_MOCK_OPENAI == 'false'
        run: |
          pnpm test:food:real --json --outputFile=integration-test-results.json
        continue-on-error: true
        id: run_integration_tests

      - name: Check test results
        id: check_tests
        if: always()
        run: |
          function checkTestOutcome {
            local testFile=$1
            local outcome="success"
            local results=$(cat $testFile)
          
            for test in $(echo "$results" | jq -r '.testResults[] | .assertionResults[] | @base64'); do
              _jq() {
                echo ${test} | base64 --decode | jq -r ${1}
              }

              status=$(_jq '.status')
              if [[ "$status" == "failed" ]]; then
                outcome="failed"
                break
              fi
            done
          
            echo $outcome
          }

          testOutcome=$(checkTestOutcome 'test-results.json')
          e2eTestOutcome=$(checkTestOutcome 'e2e-test-results.json')

          if [ "$testOutcome" != "success" ] || [ "$e2eTestOutcome" != "success" ]; then
            echo "tests_passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "tests_passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Post test results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs');
            
            function parseTestResults(filePath) {
              const rawData = fs.readFileSync(filePath, 'utf8');
              const resultData = JSON.parse(rawData);
              let resultString = '';
            
              resultData.testResults.forEach(testFile => {
                resultString += `\n### ${testFile.name}\n`;
                testFile.assertionResults.forEach(test => {
                  const status = test.status === 'passed' ? '✅' : (test.status === 'failed' ? '❌' : '⚠️');
                  resultString += `${status} ${test.title}\n`;
                });
              });
            
              return resultString;
            }
            
            let commentBody = '## 테스트 결과\n';
            
            // 목업 모드 표시
            const useMockOpenAI = process.env.USE_MOCK_OPENAI === 'true';
            commentBody += `\n**OpenAI Mode**: ${useMockOpenAI ? '🎭 Mock (목업)' : '🌐 Real API (실제)'}\n`;
            
            try {
              commentBody += '\n### Unit Tests\n';
              commentBody += parseTestResults('test-results.json');
            } catch (error) {
              commentBody += '\nUnit test results parsing failed.\n';
            }
            
            try {
              commentBody += '\n### E2E Tests (Mock)\n';
              commentBody += parseTestResults('e2e-test-results.json');
            } catch (error) {
              commentBody += '\nE2E test results parsing failed.\n';
            }
            
            // 실제 API 통합 테스트 결과가 있다면 추가
            try {
              if (fs.existsSync('integration-test-results.json')) {
                commentBody += '\n### Integration Tests (Real API)\n';
                commentBody += parseTestResults('integration-test-results.json');
              }
            } catch (error) {
              commentBody += '\nIntegration test results parsing failed.\n';
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
    outputs:
      tests_passed: ${{ steps.check_tests.outputs.tests_passed }}

  build:
    needs: test
    if: needs.test.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8.6.11

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm prisma generate

      - name: Build
        run: pnpm build

      - name: Post build success
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '## 빌드 성공 ✅\n프로젝트 빌드가 성공적으로 완료되었습니다.'
            });
